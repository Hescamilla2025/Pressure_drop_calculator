import streamlit as st
import numpy as np
import pandas as pd
from functions import friction_factor, pressure_loss, reynolds

st.title('Calculadora de caÃ­da de presiÃ³n')

# Inicializar la tabla
if 'tabla' not in st.session_state:
    columnas = {
        'Flujo\n[mÂ³/s]': [],
        'Velocidad\n[m/s]': [],
        'Densidad\n[kg/mÂ³]': [],
        'Viscosidad\n[PaÂ·s]': [],
        'Factor de fricciÃ³n\n[-]': [],
        'CaÃ­da de presiÃ³n\n[Pa]': []
    }
    st.session_state.tabla = pd.DataFrame(columnas)

# Formulario para agregar registro
st.subheader("Agregar registro")
with st.form("formulario"):
    # Entradas
    flujo = float(st.text_input('Flujo en mÂ³/s:', value='0.121'))
    diametro = float(st.text_input('DiÃ¡metro en mm:', value='243'))
    densidad = float(st.text_input('Densidad del fluido (kg/mÂ³):', value='1000'))
    viscosidad = float(st.text_input('Viscosidad del fluido (PaÂ·s):', value='0.00047'))
    rugosidad = float(st.text_input('Rugosidad de la tuberÃ­a (mm):', value='0.046'))
    longitud = float(st.text_input('Longitud de la tuberÃ­a (m):', value='100'))

    # CÃ¡lculos
    area = np.pi * ((diametro / 2000) ** 2)  # diÃ¡metro a metros y dividido por 2
    velocidad = flujo / area
    Re = reynolds(densidad, velocidad, diametro, viscosidad)
    friccion = friction_factor(diametro, Re, rugosidad)
    pressure_drop_m = pressure_loss(friccion, diametro, longitud, velocidad)
    pressure_drop_Pa = pressure_drop_m * densidad * 9.81  # ConversiÃ³n a pascales

    # Resultados
    st.write(f'ğŸ”¹ Velocidad: {velocidad:.3f} m/s')
    st.write(f'ğŸ”¹ NÃºmero de Reynolds: {Re:.0f}')
    st.write(f'ğŸ”¹ Factor de fricciÃ³n: {friccion:.5f}')
    st.write(f'ğŸ”¹ CaÃ­da de presiÃ³n: {pressure_drop_m:.2f} m  |  {pressure_drop_Pa:.2f} Pa')
    agregar = st.form_submit_button("Agregar")

if agregar:
    nuevo = {
        'Flujo\n[mÂ³/s]': flujo,
        'Velocidad\n[m/s]': velocidad,
        'Densidad\n[kg/mÂ³]': densidad,
        'Viscosidad\n[PaÂ·s]': viscosidad,
        'Factor de fricciÃ³n\n[-]': friccion,
        'CaÃ­da de presiÃ³n\n[Pa]': pressure_drop_Pa
    }
    st.session_state.tabla.loc[len(st.session_state.tabla)] = nuevo
    st.success("âœ… Registro agregado.")

# Mostrar la tabla
st.subheader("Registros")
st.dataframe(st.session_state.tabla)

# SelecciÃ³n para eliminar
st.subheader("Eliminar registros")
indices_a_eliminar = []
for i, row in st.session_state.tabla.iterrows():
    if st.checkbox(f"Eliminar fila {i}", key=f"del_{i}"):
        indices_a_eliminar.append(i)

if st.button("Eliminar seleccionados"):
    st.session_state.tabla.drop(indices_a_eliminar, inplace=True)
    st.session_state.tabla.reset_index(drop=True, inplace=True)
    st.success("ğŸ§¹ Registros eliminados.")

st.markdown(f"** Suma total de la caÃ­da de presiÃ³n: {st.session_state.tabla['CaÃ­da de presiÃ³n\n[Pa]'].sum():,.2f} Pa**")